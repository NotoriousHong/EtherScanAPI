{"ast":null,"code":"var _jsxFileName = \"/Users/notorioushong/Desktop/EtherScanServer/reactether/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React from 'react';\nimport { BrowserRouter, Routes, Route, Link } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Account() {\n  _s();\n  // const accountAPIurl = 'https://api-goerli.etherscan.io/api?module=account&action=balance&address=0x247b669CbDD58FCa982DBf337C5D94880852E3Fa&tag=latest&apikey=PDANBSZU2XWSZAFMQG3EBUX3NRECWBX59E'\n\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchData = async (req, res) => {\n    try {\n      // 요청이 시작 할 때에는 error 와 users 를 초기화하고\n      setError(null);\n      setData(null);\n      // loading 상태를 true 로 바꿉니다.\n      setLoading(true);\n      const result = await axios.get('https://jsonplaceholder.typicode.com/users').then(response => response);\n      setData(result);\n    } catch (err) {\n      setError(err);\n    }\n    setLoading(false);\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uB85C\\uB529\\uC911..\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 21\n  }, this);\n\n  // 아직 data가 받아와 지지 않았을 때는 아무것도 표시되지 않도록 해줍니다.\n  if (!data) return null;\n\n  // 드디어 data가 성공적으로 받아와 진 상태입니다.\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(Account, \"v5inua6mCP5CN8A+E7ULWpnNGvM=\");\n_c = Account;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            children: \"Account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"features\",\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(Account, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 40\n            }, this),\n            children: \"Accounts\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Account\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Routes","Route","Link","useEffect","useState","axios","Account","data","setData","loading","setLoading","error","setError","fetchData","req","res","result","get","then","response","err","App"],"sources":["/Users/notorioushong/Desktop/EtherScanServer/reactether/src/App.js"],"sourcesContent":["import './App.css';\n\nimport React from 'react';\nimport { BrowserRouter, Routes, Route, Link } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\nimport axios from 'axios';\n\n\nfunction Account() {\n  // const accountAPIurl = 'https://api-goerli.etherscan.io/api?module=account&action=balance&address=0x247b669CbDD58FCa982DBf337C5D94880852E3Fa&tag=latest&apikey=PDANBSZU2XWSZAFMQG3EBUX3NRECWBX59E'\n\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchData = async (req, res) => {\n    try {\n      // 요청이 시작 할 때에는 error 와 users 를 초기화하고\n      setError(null);\n      setData(null);\n      // loading 상태를 true 로 바꿉니다.\n      setLoading(true);\n  \n      const result = await axios.get('https://jsonplaceholder.typicode.com/users').then((response) => response);\n      setData(result);\n    } catch(err) {\n      setError(err);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  if (loading) return <div>로딩중..</div>; \n  if (error) return <div>에러가 발생했습니다</div>;\n\n\t// 아직 data가 받아와 지지 않았을 때는 아무것도 표시되지 않도록 해줍니다.\n  if (!data) return null;\n\n\t// 드디어 data가 성공적으로 받아와 진 상태입니다.\n\n  return(\n    <ul>{data}</ul>\n\n  )\n}\n\n\n\nfunction App() {\n  return (\n\n    <BrowserRouter>\n    <div className=\"App\">\n        <nav>\n          <li>\n            <Link to=\"/\">Account</Link>\n          </li>\n        </nav>\n\n\n        <section className=\"features\">\n            <Routes>\n              <Route path=\"/\" element={<Account />}>Accounts</Route>\n            </Routes>\n        </section>\n    </div>\n  </BrowserRouter>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAElB,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAAEC,MAAM,EAAEC,KAAK,EAAEC,IAAI,QAAQ,kBAAkB;AACrE,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAAC;AAG1B,SAASC,OAAO,GAAG;EAAA;EACjB;;EAEA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMS,SAAS,GAAG,OAAOC,GAAG,EAAEC,GAAG,KAAK;IACpC,IAAI;MACF;MACAH,QAAQ,CAAC,IAAI,CAAC;MACdJ,OAAO,CAAC,IAAI,CAAC;MACb;MACAE,UAAU,CAAC,IAAI,CAAC;MAEhB,MAAMM,MAAM,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,4CAA4C,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAAC;MACzGX,OAAO,CAACQ,MAAM,CAAC;IACjB,CAAC,CAAC,OAAMI,GAAG,EAAE;MACXR,QAAQ,CAACQ,GAAG,CAAC;IACf;IACAV,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAEDP,SAAS,CAAC,MAAM;IACdU,SAAS,EAAE;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIJ,OAAO,EAAE,oBAAO;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAgB;EACpC,IAAIE,KAAK,EAAE,oBAAO;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAqB;;EAExC;EACC,IAAI,CAACJ,IAAI,EAAE,OAAO,IAAI;;EAEvB;;EAEC,oBACE;IAAA,UAAKA;EAAI;IAAA;IAAA;IAAA;EAAA,QAAM;AAGnB;AAAC,GAvCQD,OAAO;AAAA,KAAPA,OAAO;AA2ChB,SAASe,GAAG,GAAG;EACb,oBAEE,QAAC,aAAa;IAAA,uBACd;MAAK,SAAS,EAAC,KAAK;MAAA,wBAChB;QAAA,uBACE;UAAA,uBACE,QAAC,IAAI;YAAC,EAAE,EAAC,GAAG;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAe;UAAA;UAAA;UAAA;QAAA;MACxB;QAAA;QAAA;QAAA;MAAA,QACD,eAGN;QAAS,SAAS,EAAC,UAAU;QAAA,uBACzB,QAAC,MAAM;UAAA,uBACL,QAAC,KAAK;YAAC,IAAI,EAAC,GAAG;YAAC,OAAO,eAAE,QAAC,OAAO;cAAA;cAAA;cAAA;YAAA,QAAI;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAiB;UAAA;UAAA;UAAA;QAAA;MAC/C;QAAA;QAAA;QAAA;MAAA,QACH;IAAA;MAAA;MAAA;MAAA;IAAA;EACR;IAAA;IAAA;IAAA;EAAA,QACQ;AAElB;AAAC,MApBQA,GAAG;AAsBZ,eAAeA,GAAG;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}